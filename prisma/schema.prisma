generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  planId        String?
  accounts      Account[]
  plan          Plan[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id         String   @id @default(cuid())
  name       String
  code       String
  credit     String
  level      String
  block      String
  vof        String
  periodNum  Int
  semesterId String
  semester   Semester @relation(fields: [semesterId], references: [id])
  plans      Plan[]   @relation("CourseToPlan")

  @@unique([code, semesterId, periodNum])
}

model Semester {
  id      String   @id @default(cuid())
  year    Int      @unique
  courses Course[]
}

model Plan {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  creatorId String
  creator   User     @relation(fields: [creatorId], references: [id])
  courses   Course[] @relation("CourseToPlan")
}
